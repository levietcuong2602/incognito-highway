// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import peer "github.com/libp2p/go-libp2p-core/peer"
import proto "highway/proto"

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// GetClientSupportShard provides a mock function with given fields: cid
func (_m *Router) GetClientSupportShard(cid int) (proto.HighwayServiceClient, peer.ID, error) {
	ret := _m.Called(cid)

	var r0 proto.HighwayServiceClient
	if rf, ok := ret.Get(0).(func(int) proto.HighwayServiceClient); ok {
		r0 = rf(cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.HighwayServiceClient)
		}
	}

	var r1 peer.ID
	if rf, ok := ret.Get(1).(func(int) peer.ID); ok {
		r1 = rf(cid)
	} else {
		r1 = ret.Get(1).(peer.ID)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(cid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHighwayServiceClient provides a mock function with given fields: pid
func (_m *Router) GetHighwayServiceClient(pid peer.ID) (proto.HighwayServiceClient, peer.ID, error) {
	ret := _m.Called(pid)

	var r0 proto.HighwayServiceClient
	if rf, ok := ret.Get(0).(func(peer.ID) proto.HighwayServiceClient); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.HighwayServiceClient)
		}
	}

	var r1 peer.ID
	if rf, ok := ret.Get(1).(func(peer.ID) peer.ID); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Get(1).(peer.ID)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(peer.ID) error); ok {
		r2 = rf(pid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetID provides a mock function with given fields:
func (_m *Router) GetID() peer.ID {
	ret := _m.Called()

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}
