// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import peer "github.com/libp2p/go-libp2p-core/peer"
import proto "highway/proto"

// ConnKeeper is an autogenerated mock type for the ConnKeeper type
type ConnKeeper struct {
	mock.Mock
}

// CloseConnection provides a mock function with given fields: peerID
func (_m *ConnKeeper) CloseConnection(peerID peer.ID) error {
	ret := _m.Called(peerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID) error); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: _a0
func (_m *ConnKeeper) GetClient(_a0 peer.ID) (proto.HighwayConnectorServiceClient, error) {
	ret := _m.Called(_a0)

	var r0 proto.HighwayConnectorServiceClient
	if rf, ok := ret.Get(0).(func(peer.ID) proto.HighwayConnectorServiceClient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.HighwayConnectorServiceClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnection provides a mock function with given fields: peerID
func (_m *ConnKeeper) GetConnection(peerID peer.ID) (*grpc.ClientConn, error) {
	ret := _m.Called(peerID)

	var r0 *grpc.ClientConn
	if rf, ok := ret.Get(0).(func(peer.ID) *grpc.ClientConn); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
