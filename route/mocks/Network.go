// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import goprocess "github.com/jbenet/goprocess"
import mock "github.com/stretchr/testify/mock"
import multiaddr "github.com/multiformats/go-multiaddr"
import network "github.com/libp2p/go-libp2p-core/network"
import peer "github.com/libp2p/go-libp2p-core/peer"
import peerstore "github.com/libp2p/go-libp2p-core/peerstore"

// Network is an autogenerated mock type for the Network type
type Network struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Network) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClosePeer provides a mock function with given fields: _a0
func (_m *Network) ClosePeer(_a0 peer.ID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connectedness provides a mock function with given fields: _a0
func (_m *Network) Connectedness(_a0 peer.ID) network.Connectedness {
	ret := _m.Called(_a0)

	var r0 network.Connectedness
	if rf, ok := ret.Get(0).(func(peer.ID) network.Connectedness); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(network.Connectedness)
	}

	return r0
}

// Conns provides a mock function with given fields:
func (_m *Network) Conns() []network.Conn {
	ret := _m.Called()

	var r0 []network.Conn
	if rf, ok := ret.Get(0).(func() []network.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Conn)
		}
	}

	return r0
}

// ConnsToPeer provides a mock function with given fields: p
func (_m *Network) ConnsToPeer(p peer.ID) []network.Conn {
	ret := _m.Called(p)

	var r0 []network.Conn
	if rf, ok := ret.Get(0).(func(peer.ID) []network.Conn); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Conn)
		}
	}

	return r0
}

// DialPeer provides a mock function with given fields: _a0, _a1
func (_m *Network) DialPeer(_a0 context.Context, _a1 peer.ID) (network.Conn, error) {
	ret := _m.Called(_a0, _a1)

	var r0 network.Conn
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) network.Conn); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InterfaceListenAddresses provides a mock function with given fields:
func (_m *Network) InterfaceListenAddresses() ([]multiaddr.Multiaddr, error) {
	ret := _m.Called()

	var r0 []multiaddr.Multiaddr
	if rf, ok := ret.Get(0).(func() []multiaddr.Multiaddr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]multiaddr.Multiaddr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Listen provides a mock function with given fields: _a0
func (_m *Network) Listen(_a0 ...multiaddr.Multiaddr) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...multiaddr.Multiaddr) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListenAddresses provides a mock function with given fields:
func (_m *Network) ListenAddresses() []multiaddr.Multiaddr {
	ret := _m.Called()

	var r0 []multiaddr.Multiaddr
	if rf, ok := ret.Get(0).(func() []multiaddr.Multiaddr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]multiaddr.Multiaddr)
		}
	}

	return r0
}

// LocalPeer provides a mock function with given fields:
func (_m *Network) LocalPeer() peer.ID {
	ret := _m.Called()

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}

// NewStream provides a mock function with given fields: _a0, _a1
func (_m *Network) NewStream(_a0 context.Context, _a1 peer.ID) (network.Stream, error) {
	ret := _m.Called(_a0, _a1)

	var r0 network.Stream
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) network.Stream); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notify provides a mock function with given fields: _a0
func (_m *Network) Notify(_a0 network.Notifiee) {
	_m.Called(_a0)
}

// Peers provides a mock function with given fields:
func (_m *Network) Peers() []peer.ID {
	ret := _m.Called()

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func() []peer.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// Peerstore provides a mock function with given fields:
func (_m *Network) Peerstore() peerstore.Peerstore {
	ret := _m.Called()

	var r0 peerstore.Peerstore
	if rf, ok := ret.Get(0).(func() peerstore.Peerstore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peerstore.Peerstore)
		}
	}

	return r0
}

// Process provides a mock function with given fields:
func (_m *Network) Process() goprocess.Process {
	ret := _m.Called()

	var r0 goprocess.Process
	if rf, ok := ret.Get(0).(func() goprocess.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(goprocess.Process)
		}
	}

	return r0
}

// SetConnHandler provides a mock function with given fields: _a0
func (_m *Network) SetConnHandler(_a0 network.ConnHandler) {
	_m.Called(_a0)
}

// SetStreamHandler provides a mock function with given fields: _a0
func (_m *Network) SetStreamHandler(_a0 network.StreamHandler) {
	_m.Called(_a0)
}

// StopNotify provides a mock function with given fields: _a0
func (_m *Network) StopNotify(_a0 network.Notifiee) {
	_m.Called(_a0)
}
