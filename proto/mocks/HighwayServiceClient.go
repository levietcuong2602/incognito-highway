// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import proto "highway/proto"

// HighwayServiceClient is an autogenerated mock type for the HighwayServiceClient type
type HighwayServiceClient struct {
	mock.Mock
}

// GetBlockBeaconByHash provides a mock function with given fields: ctx, in, opts
func (_m *HighwayServiceClient) GetBlockBeaconByHash(ctx context.Context, in *proto.GetBlockBeaconByHashRequest, opts ...grpc.CallOption) (*proto.GetBlockBeaconByHashResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetBlockBeaconByHashResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockBeaconByHashRequest, ...grpc.CallOption) *proto.GetBlockBeaconByHashResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockBeaconByHashResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockBeaconByHashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockCrossShardByHash provides a mock function with given fields: ctx, in, opts
func (_m *HighwayServiceClient) GetBlockCrossShardByHash(ctx context.Context, in *proto.GetBlockCrossShardByHashRequest, opts ...grpc.CallOption) (*proto.GetBlockCrossShardByHashResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetBlockCrossShardByHashResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockCrossShardByHashRequest, ...grpc.CallOption) *proto.GetBlockCrossShardByHashResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockCrossShardByHashResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockCrossShardByHashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockShardByHash provides a mock function with given fields: ctx, in, opts
func (_m *HighwayServiceClient) GetBlockShardByHash(ctx context.Context, in *proto.GetBlockShardByHashRequest, opts ...grpc.CallOption) (*proto.GetBlockShardByHashResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetBlockShardByHashResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockShardByHashRequest, ...grpc.CallOption) *proto.GetBlockShardByHashResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockShardByHashResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockShardByHashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *HighwayServiceClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) *proto.RegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamBlockByHeight provides a mock function with given fields: ctx, in, opts
func (_m *HighwayServiceClient) StreamBlockByHeight(ctx context.Context, in *proto.BlockByHeightRequest, opts ...grpc.CallOption) (proto.HighwayService_StreamBlockByHeightClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 proto.HighwayService_StreamBlockByHeightClient
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BlockByHeightRequest, ...grpc.CallOption) proto.HighwayService_StreamBlockByHeightClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.HighwayService_StreamBlockByHeightClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.BlockByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
